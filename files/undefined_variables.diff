From: Phil Thompson <phil@riverbankcomputing.com>
Date: Mon, 25 Apr 2022 17:56:27 +0100
Subject: Various fixes identified by pyflakes

Origin: upstream, https://riverbankcomputing.com/hg/sip/rev/0da96769835fd831
---
 sipbuild/bindings.py                        | 2 +-
 sipbuild/buildable.py                       | 1 -
 sipbuild/builder.py                         | 2 +-
 sipbuild/distutils_builder.py               | 3 +--
 sipbuild/generator/parser/instantiations.py | 8 ++++----
 sipbuild/generator/parser/parser_manager.py | 6 +++---
 sipbuild/generator/parser/rules.py          | 7 +++----
 sipbuild/generator/specification.py         | 2 +-
 sipbuild/generator/templates.py             | 4 ++--
 sipbuild/project.py                         | 3 +--
 sipbuild/pyproject.py                       | 4 ++--
 sipbuild/setuptools_builder.py              | 5 ++---
 12 files changed, 21 insertions(+), 26 deletions(-)

diff --git a/sipbuild/bindings.py b/sipbuild/bindings.py
index 0b5f72a..9b37c72 100644
--- a/sipbuild/bindings.py
+++ b/sipbuild/bindings.py
@@ -198,7 +198,7 @@ class Bindings(Configurable):
 
         # Generate any extracts.
         if self.generate_extracts:
-            generateExtracts(pt, extracts)
+            generateExtracts(pt, self.generate_extracts)
 
         # Generate any type hints file.
         if self.pep484_pyi and not self.internal:
diff --git a/sipbuild/buildable.py b/sipbuild/buildable.py
index a5d7151..3a04e31 100644
--- a/sipbuild/buildable.py
+++ b/sipbuild/buildable.py
@@ -23,7 +23,6 @@
 
 import importlib
 import os
-import sys
 
 from .exceptions import UserException
 from .installable import Installable
diff --git a/sipbuild/builder.py b/sipbuild/builder.py
index 3027bda..9f7e626 100644
--- a/sipbuild/builder.py
+++ b/sipbuild/builder.py
@@ -315,7 +315,7 @@ class Builder(AbstractBuilder):
 
                     # Create a PEP 561 marker file.
                     py_typed_path = os.path.join(project.build_dir, 'py.typed')
-                    with open(py_typed_path, 'w') as f:
+                    with open(py_typed_path, 'w') as _:
                         pass
 
                     installable = Installable('py_typed',
diff --git a/sipbuild/distutils_builder.py b/sipbuild/distutils_builder.py
index b1ca98f..a2be00f 100644
--- a/sipbuild/distutils_builder.py
+++ b/sipbuild/distutils_builder.py
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -27,7 +27,6 @@ from distutils.extension import Extension
 from distutils.log import ERROR, INFO, set_threshold
 
 import os
-import sys
 
 from .buildable import BuildableModule
 from .builder import Builder
diff --git a/sipbuild/generator/parser/instantiations.py b/sipbuild/generator/parser/instantiations.py
index c963684..3e0d5a8 100644
--- a/sipbuild/generator/parser/instantiations.py
+++ b/sipbuild/generator/parser/instantiations.py
@@ -180,7 +180,7 @@ def _instantiate_argument(proto_arg, proto_class, tmpl_names, template,
 
     # Descend into any sub-templates.
     if proto_arg.type is ArgumentType.TEMPLATE:
-        proto_template = proto_args.definition
+        proto_template = proto_arg.definition
         i_template = copy(proto_template)
         i_template.types = _instantiate_signature(proto_template.types,
                 proto_class, template, i_class, expansions, pm)
@@ -416,10 +416,10 @@ def _instantiate_typedefs(p, symbol, tmpl_names, proto_class, template,
         i_typedef.fq_cpp_name = normalised_scoped_name(
                 proto_typedef.fq_cpp_name, i_class)
         i_typedef.scope = i_class
-        i_typedef.module = iclass.iface_file.module
+        i_typedef.module = i_class.iface_file.module
 
-        i_template.type = _instantiate_argument(proto_template.type,
-                proto_class, tmpl_names, template, i_class, expansions, pm)
+        i_typedef.type = _instantiate_argument(proto_typedef.type, proto_class,
+                tmpl_names, template, i_class, expansions, pm)
 
         pm.add_typedef(p, symbol, i_typedef)
 
diff --git a/sipbuild/generator/parser/parser_manager.py b/sipbuild/generator/parser/parser_manager.py
index 1510fd3..fcdbfc1 100644
--- a/sipbuild/generator/parser/parser_manager.py
+++ b/sipbuild/generator/parser/parser_manager.py
@@ -36,7 +36,7 @@ from ..specification import (AccessSpecifier, Argument, ArgumentType,
         IfaceFile, IfaceFileType, KwArgs, MappedType, Member, Module, Overload,
         PyQtMethodSpecifier, PySlot, Qualifier, QualifierType, ScopedName,
         Signature, Specification, Transfer, TypeHints, WrappedClass,
-        WrappedEnum, WrappedEnumMember)
+        WrappedException, WrappedEnum, WrappedEnumMember)
 from ..templates import encoded_template_name, same_template_signature
 from ..utils import argument_as_str, normalised_scoped_name, same_base_type
 
@@ -329,7 +329,7 @@ class ParserManager:
             if self.scope_access_specifier is AccessSpecifier.PROTECTED and not self._protected_is_public:
                 scope.is_protected = True
 
-                if iface_file_type is IFaceFileType.CLASS:
+                if iface_file_type is IfaceFileType.CLASS:
                     scope.needs_shadow = True
 
             # Header code from outer scopes is also included.
@@ -1767,7 +1767,7 @@ class ParserManager:
         """ Validate a completed variable. """
 
         if variable.type.type is ArgumentType.CAPSULE:
-            pm.parser_error(p, symbol,
+            self.parser_error(p, symbol,
                     "capsule variables are not yet supported")
 
         access_specifier = self.scope_access_specifier
diff --git a/sipbuild/generator/parser/rules.py b/sipbuild/generator/parser/rules.py
index fd2e01d..4336545 100644
--- a/sipbuild/generator/parser/rules.py
+++ b/sipbuild/generator/parser/rules.py
@@ -24,10 +24,9 @@
 from ..specification import (AccessSpecifier, Argument, ArgumentType,
         ArrayArgument, ClassKey, Docstring, DocstringFormat, Extract,
         FunctionCall, IfaceFile, IfaceFileType, KwArgs, License, MappedType,
-        MappedTypeTemplate, Module, Overload, Property, PyQtMethodSpecifier,
+        MappedTypeTemplate, Overload, Property, PyQtMethodSpecifier,
         QualifierType, ScopedName, Signature, Template, ThrowArguments, Value,
-        ValueType, VirtualErrorHandler, WrappedClass, WrappedTypedef,
-        WrappedVariable)
+        ValueType, VirtualErrorHandler, WrappedTypedef, WrappedVariable)
 from ..templates import same_template_signature
 from ..utils import normalised_scoped_name, search_typedefs
 
@@ -1281,7 +1280,7 @@ def p_property(p):
 
     prop = Property(name=name, getter=getter, setter=p[3].get('set'))
 
-    for directive in body:
+    for directive in p[6]:
         if isinstance(directive, Docstring):
             prop.docstring = directive
 
diff --git a/sipbuild/generator/specification.py b/sipbuild/generator/specification.py
index 32bee59..ec4ae4f 100644
--- a/sipbuild/generator/specification.py
+++ b/sipbuild/generator/specification.py
@@ -22,7 +22,7 @@
 
 
 from dataclasses import dataclass, field
-from enum import auto, Enum
+from enum import Enum
 from typing import Any, List, Optional, Union
 
 
diff --git a/sipbuild/generator/templates.py b/sipbuild/generator/templates.py
index e4ed09f..8708556 100644
--- a/sipbuild/generator/templates.py
+++ b/sipbuild/generator/templates.py
@@ -23,7 +23,7 @@
 
 from copy import copy
 
-from .specification import ArgumentType, CodeBlock, IfaceFileType, ScopedName
+from .specification import ArgumentType, IfaceFileType, ScopedName
 from .utils import argument_as_str, same_base_type
 
 
@@ -180,7 +180,7 @@ def template_expansions(template_names, instantiation_values,
             if value_arg.type is ArgumentType.TEMPLATE and len(name_arg.definiton.types.args) == len(value_arg.definition.types.args):
                 expansions.update(
                         template_expansions(name_arg.definition.types,
-                                value_arg.definition.types, known))
+                                value_arg.definition.types, declared_names))
 
     return expansions
 
diff --git a/sipbuild/project.py b/sipbuild/project.py
index b63fae3..e9330d4 100644
--- a/sipbuild/project.py
+++ b/sipbuild/project.py
@@ -38,8 +38,7 @@ from .configurable import Configurable, Option
 from .exceptions import UserException
 from .module import resolve_abi_version
 from .py_versions import OLDEST_SUPPORTED_MINOR
-from .pyproject import (PyProjectException, PyProjectOptionException,
-        PyProjectUndefinedOptionException)
+from .pyproject import PyProjectException, PyProjectOptionException
 
 
 class Project(AbstractProject, Configurable):
diff --git a/sipbuild/pyproject.py b/sipbuild/pyproject.py
index 3335ac6..1ba2223 100644
--- a/sipbuild/pyproject.py
+++ b/sipbuild/pyproject.py
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -24,7 +24,7 @@
 from collections import OrderedDict
 import toml
 
-from .exceptions import UserFileException, UserParseException
+from .exceptions import UserFileException
 from .py_versions import OLDEST_SUPPORTED_MINOR
 
 
diff --git a/sipbuild/setuptools_builder.py b/sipbuild/setuptools_builder.py
index ae5c431..c540764 100644
--- a/sipbuild/setuptools_builder.py
+++ b/sipbuild/setuptools_builder.py
@@ -1,4 +1,4 @@
-# Copyright (c) 2021, Riverbank Computing Limited
+# Copyright (c) 2022, Riverbank Computing Limited
 # All rights reserved.
 #
 # This copy of SIP is licensed for use under the terms of the SIP License
@@ -22,9 +22,8 @@
 
 
 import os
-import sys
 
-from setuptools import Distribution, Extension, setup
+from setuptools import Extension, setup
 
 from .buildable import BuildableModule
 from .builder import Builder
